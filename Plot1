
import matplotlib.pyplot as plt
import numpy as np

xpoints = np.array([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1])

n_cpoints = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])


def ypoints(q, n_c):
    return (q*(1-q)*n_c)/(1-q*n_c)

ypoints0 = np.array([ypoints(xpoints[0],n_cpoints[0]),
                     ypoints(xpoints[1],n_cpoints[0]),ypoints(xpoints[2],n_cpoints[0]),
                     ypoints(xpoints[3],n_cpoints[0]),ypoints(xpoints[4],n_cpoints[0]),
                     ypoints(xpoints[5],n_cpoints[0]),ypoints(xpoints[6],n_cpoints[0]),
                     ypoints(xpoints[7],n_cpoints[0]),ypoints(xpoints[8],n_cpoints[0]),
                     ypoints(xpoints[9],n_cpoints[0]),ypoints(xpoints[10],n_cpoints[0])])

ypoints1 = np.array([ypoints(xpoints[0],n_cpoints[1]),
                     ypoints(xpoints[1],n_cpoints[1]),ypoints(xpoints[2],n_cpoints[1]),
                     ypoints(xpoints[3],n_cpoints[1]),ypoints(xpoints[4],n_cpoints[1]),
                     ypoints(xpoints[5],n_cpoints[1]),ypoints(xpoints[6],n_cpoints[1]),
                     ypoints(xpoints[7],n_cpoints[1]),ypoints(xpoints[8],n_cpoints[1]),
                     ypoints(xpoints[9],n_cpoints[1]),ypoints(xpoints[10],n_cpoints[1])])

ypoints2 = np.array([ypoints(xpoints[0],n_cpoints[2]),
                     ypoints(xpoints[1],n_cpoints[2]),ypoints(xpoints[2],n_cpoints[2]),
                     ypoints(xpoints[3],n_cpoints[2]),ypoints(xpoints[4],n_cpoints[2]),
                     ypoints(xpoints[5],n_cpoints[2]),ypoints(xpoints[6],n_cpoints[2]),
                     ypoints(xpoints[7],n_cpoints[2]),ypoints(xpoints[8],n_cpoints[2]),
                     ypoints(xpoints[9],n_cpoints[2]),ypoints(xpoints[10],n_cpoints[2])])

ypoints3 = np.array([ypoints(xpoints[0],n_cpoints[3]),
                     ypoints(xpoints[1],n_cpoints[3]),ypoints(xpoints[2],n_cpoints[3]),
                     ypoints(xpoints[3],n_cpoints[3]),ypoints(xpoints[4],n_cpoints[3]),
                     ypoints(xpoints[5],n_cpoints[3]),ypoints(xpoints[6],n_cpoints[3]),
                     ypoints(xpoints[7],n_cpoints[3]),ypoints(xpoints[8],n_cpoints[3]),
                     ypoints(xpoints[9],n_cpoints[3]),ypoints(xpoints[10],n_cpoints[3])])

ypoints4 = np.array([ypoints(xpoints[0],n_cpoints[4]),
                     ypoints(xpoints[1],n_cpoints[4]),ypoints(xpoints[2],n_cpoints[4]),
                     ypoints(xpoints[3],n_cpoints[4]),ypoints(xpoints[4],n_cpoints[4]),
                     ypoints(xpoints[5],n_cpoints[4]),ypoints(xpoints[6],n_cpoints[4]),
                     ypoints(xpoints[7],n_cpoints[4]),ypoints(xpoints[8],n_cpoints[4]),
                     ypoints(xpoints[9],n_cpoints[4]),ypoints(xpoints[10],n_cpoints[4])])

ypoints5 = np.array([ypoints(xpoints[0],n_cpoints[5]),
                     ypoints(xpoints[1],n_cpoints[5]),ypoints(xpoints[2],n_cpoints[5]),
                     ypoints(xpoints[3],n_cpoints[5]),ypoints(xpoints[4],n_cpoints[5]),
                     ypoints(xpoints[5],n_cpoints[5]),ypoints(xpoints[6],n_cpoints[5]),
                     ypoints(xpoints[7],n_cpoints[5]),ypoints(xpoints[8],n_cpoints[5]),
                     ypoints(xpoints[9],n_cpoints[5]),ypoints(xpoints[10],n_cpoints[5])])

ypoints6 = np.array([ypoints(xpoints[0],n_cpoints[6]),
                     ypoints(xpoints[1],n_cpoints[6]),ypoints(xpoints[2],n_cpoints[6]),
                     ypoints(xpoints[3],n_cpoints[6]),ypoints(xpoints[4],n_cpoints[6]),
                     ypoints(xpoints[5],n_cpoints[6]),ypoints(xpoints[6],n_cpoints[6]),
                     ypoints(xpoints[7],n_cpoints[6]),ypoints(xpoints[8],n_cpoints[6]),
                     ypoints(xpoints[9],n_cpoints[6]),ypoints(xpoints[10],n_cpoints[6])])

ypoints7 = np.array([ypoints(xpoints[0],n_cpoints[7]),
                     ypoints(xpoints[1],n_cpoints[7]),ypoints(xpoints[2],n_cpoints[7]),
                     ypoints(xpoints[3],n_cpoints[7]),ypoints(xpoints[4],n_cpoints[7]),
                     ypoints(xpoints[5],n_cpoints[7]),ypoints(xpoints[6],n_cpoints[7]),
                     ypoints(xpoints[7],n_cpoints[7]),ypoints(xpoints[8],n_cpoints[7]),
                     ypoints(xpoints[9],n_cpoints[7]),ypoints(xpoints[10],n_cpoints[7])])


coal2013 = np.array([0,0.1/(10459*0.000293071),0.2/(10459*0.000293071), 
                  0.3/(10459*0.000293071), 0.4/(10459*0.000293071), 
                  0.5/(10459*0.000293071), 0.6/(10459*0.000293071), 
                  0.7/(10459*0.000293071), 0.8/(10459*0.000293071), 
                  0.9/(10459*0.000293071), 1/(10459*0.000293071)])

coal2016 = np.array([0,0.1/(10493*0.000293071),0.2/(10493*0.000293071), 
                  0.3/(10493*0.000293071), 0.4/(10493*0.000293071), 
                  0.5/(10493*0.000293071), 0.6/(10493*0.000293071), 
                  0.7/(10493*0.000293071), 0.8/(10493*0.000293071), 
                  0.9/(10493*0.000293071), 1/(10493*0.000293071)])

coal2020 = np.array([0,0.1/(10655*0.000293071),0.2/(10655*0.000293071), 
                  0.3/(10655*0.000293071), 0.4/(10655*0.000293071), 
                  0.5/(10655*0.000293071), 0.6/(10655*0.000293071), 
                  0.7/(10655*0.000293071), 0.8/(10655*0.000293071), 
                  0.9/(10655*0.000293071), 1/(10655*0.000293071)])

coal2023 = np.array([0,0.1/(10745*0.000293071),0.2/(10745*0.000293071), 
                  0.3/(10745*0.000293071), 0.4/(10745*0.000293071), 
                  0.5/(10745*0.000293071), 0.6/(10745*0.000293071), 
                  0.7/(10745*0.000293071), 0.8/(10745*0.000293071), 
                  0.9/(10745*0.000293071), 1/(10745*0.000293071)])

pet2013 = np.array([0,0.1/(10713*0.000293071),0.2/(10713*0.000293071), 
                  0.3/(10713*0.000293071), 0.4/(10713*0.000293071), 
                  0.5/(10713*0.000293071), 0.6/(10713*0.000293071), 
                  0.7/(10713*0.000293071), 0.8/(10713*0.000293071), 
                  0.9/(10713*0.000293071), 1/(10713*0.000293071)])

pet2016 = np.array([0,0.1/(10811*0.000293071),0.2/(10811*0.000293071), 
                  0.3/(10811*0.000293071), 0.4/(10811*0.000293071), 
                  0.5/(10811*0.000293071), 0.6/(10811*0.000293071), 
                  0.7/(10811*0.000293071), 0.8/(10811*0.000293071), 
                  0.9/(10811*0.000293071), 1/(10811*0.000293071)])

pet2020 = np.array([0,0.1/(11259*0.000293071),0.2/(11259*0.000293071), 
                  0.3/(11259*0.000293071), 0.4/(11259*0.000293071), 
                  0.5/(11259*0.000293071), 0.6/(11259*0.000293071), 
                  0.7/(11259*0.000293071), 0.8/(11259*0.000293071), 
                  0.9/(11259*0.000293071), 1/(11259*0.000293071)])

pet2023 = np.array([0,0.1/(11465*0.000293071),0.2/(11465*0.000293071), 
                  0.3/(11465*0.000293071), 0.4/(11465*0.000293071), 
                  0.5/(11465*0.000293071), 0.6/(11465*0.000293071), 
                  0.7/(11465*0.000293071), 0.8/(11465*0.000293071), 
                  0.9/(11465*0.000293071), 1/(11465*0.000293071)])

gas2013 = np.array([0,0.1/(7948*0.000293071),0.2/(7948*0.000293071), 
                  0.3/(7948*0.000293071), 0.4/(7948*0.000293071), 
                  0.5/(7948*0.000293071), 0.6/(7948*0.000293071), 
                  0.7/(7948*0.000293071), 0.8/(7948*0.000293071), 
                  0.9/(7948*0.000293071), 1/(7948*0.000293071)])

gas2016 = np.array([0,0.1/(7863*0.000293071),0.2/(7863*0.000293071), 
                  0.3/(7863*0.000293071), 0.4/(7863*0.000293071), 
                  0.5/(7863*0.000293071), 0.6/(7863*0.000293071), 
                  0.7/(7863*0.000293071), 0.8/(7863*0.000293071), 
                  0.9/(7863*0.000293071), 1/(7863*0.000293071)])

gas2020 = np.array([0,0.1/(7725*0.000293071),0.2/(7725*0.000293071), 
                  0.3/(7725*0.000293071), 0.4/(7725*0.000293071), 
                  0.5/(7725*0.000293071), 0.6/(7725*0.000293071), 
                  0.7/(7725*0.000293071), 0.8/(7725*0.000293071), 
                  0.9/(7725*0.000293071), 1/(7725*0.000293071)])

gas2023 = np.array([0,0.1/(7721*0.000293071),0.2/(7721*0.000293071), 
                  0.3/(7721*0.000293071), 0.4/(7721*0.000293071), 
                  0.5/(7721*0.000293071), 0.6/(7721*0.000293071), 
                  0.7/(7721*0.000293071), 0.8/(7721*0.000293071), 
                  0.9/(7721*0.000293071), 1/(7721*0.000293071)])

nuc2013 = np.array([0,0.1/(10449*0.000293071),0.2/(10449*0.000293071), 
                  0.3/(10449*0.000293071), 0.4/(10449*0.000293071), 
                  0.5/(10449*0.000293071), 0.6/(10449*0.000293071), 
                  0.7/(10449*0.000293071), 0.8/(10449*0.000293071), 
                  0.9/(10449*0.000293071), 1/(10449*0.000293071)])

nuc2016 = np.array([0,0.1/(10459*0.000293071),0.2/(10459*0.000293071), 
                  0.3/(10459*0.000293071), 0.4/(10459*0.000293071), 
                  0.5/(10459*0.000293071), 0.6/(10459*0.000293071), 
                  0.7/(10459*0.000293071), 0.8/(10459*0.000293071), 
                  0.9/(10459*0.000293071), 1/(10459*0.000293071)])

nuc2020 = np.array([0,0.1/(10446*0.000293071),0.2/(10446*0.000293071), 
                  0.3/(10446*0.000293071), 0.4/(10446*0.000293071), 
                  0.5/(10446*0.000293071), 0.6/(10446*0.000293071), 
                  0.7/(10446*0.000293071), 0.8/(10446*0.000293071), 
                  0.9/(10446*0.000293071), 1/(10446*0.000293071)])

nuc2023 = np.array([0,0.1/(10452*0.000293071),0.2/(10452*0.000293071), 
                  0.3/(10452*0.000293071), 0.4/(10452*0.000293071), 
                  0.5/(10452*0.000293071), 0.6/(10452*0.000293071), 
                  0.7/(10452*0.000293071), 0.8/(10452*0.000293071), 
                  0.9/(10452*0.000293071), 1/(10452*0.000293071)])

coal2023slope = 1/(10745*0.000293071)
pet2023slope = 1/(11465*0.000293071)
gas2023slope = 1/(7721*0.000293071)
nuc2023slope = 1/(10452*0.000293071)

plt.plot(xpoints,ypoints0, label = '$ƞ_c$ = 0.2')
plt.plot(xpoints,ypoints1, label = '$ƞ_c$ = 0.3')
plt.plot(xpoints,ypoints2, label = '$ƞ_c$ = 0.4')
plt.plot(xpoints,ypoints3, label = '$ƞ_c$ = 0.5')
plt.plot(xpoints,ypoints4, label = '$ƞ_c$ = 0.6')
plt.plot(xpoints,ypoints5, label = '$ƞ_c$ = 0.7')
plt.plot(xpoints,ypoints6, label = '$ƞ_c$ = 0.8')
plt.plot(xpoints,ypoints7, label = '$ƞ_c$ = 0.9')


#plt.plot(xpoints,coal2013, label = 'coal 2013')
#plt.plot(xpoints,coal2016, label = 'coal 2016')
#plt.plot(xpoints,coal2020, label = 'coal 2020')
plt.plot(xpoints,coal2023, label = 'coal 2023')

#plt.plot(xpoints,pet2013, label = 'pet 2013')
#plt.plot(xpoints,pet2016, label = 'pet 2016')
#plt.plot(xpoints,pet2020, label = 'pet 2020')
plt.plot(xpoints,pet2023, label = 'pet 2023')

#plt.plot(xpoints, gas2013, label = 'gas 2013')
#plt.plot(xpoints, gas2016, label = 'gas 2016')
#plt.plot(xpoints, gas2020, label = 'gas 2020')
plt.plot(xpoints, gas2023, label = 'gas 2023')

#plt.plot(xpoints, nuc2013, label = 'nuc 2013')
#plt.plot(xpoints, nuc2016, label = 'nuc 2016')
#plt.plot(xpoints, nuc2020, label = 'nuc 2020')
plt.plot(xpoints, nuc2023, label = 'nuc 2023')

plt.xlim(-0.05,1.05)
plt.ylim(-0.05,0.55)

plt.xlabel(r'$q = \frac{\dot{Q}_H}{\overline{G}(T_H-T_C)} = \frac{\dot{Q}}{\dot{Q}_{max}}$')
plt.ylabel(r'$\frac{W_{cyc}}{\overline{G}(T_h-T_c)}$')

plt.title('Curzon-Ahlborn Power vs Efficiency')
plt.legend()
plt.show()


    
