#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb 13 10:42:38 2025

@author: dilarabaysal
"""

import matplotlib.pyplot as plt
import numpy as np

'''
MAIN GRAPH
'''
q_values = np.linspace(0, 1, 100)
n_c_values = np.arange(0.1, 1, 0.1)

# Plots the main graph

for n_c_values in n_c_values:
    y_values = (q_values * (1 - q_values) * n_c_values) / (1 - q_values * n_c_values)
    plt.plot(q_values, y_values, label= '$\eta_C$ = '+ str(round(n_c_values,1)))


'''
ADDITIONAL: FUEL TYPE GRAPHS
'''
unit = 0.000293071 #conversion factor for Btu to kwh
slopevals = np.array([0,1])#q values for the slopes

'''
#plotting the n_ca values as a straight slope for COAL
coal2013 = np.array([0,1/(10459*unit)])
coal2016 = np.array([0,1/(10493*unit)])
coal2020 = np.array([0,1/(10655*unit)])
coal2023 = np.array([0,1/(10745*unit)])

plt.plot(slopevals,coal2013, label = '$\eta_{CA}$ = '+str(round(1/(10459*unit), 3)))
plt.plot(slopevals,coal2016, label = '$\eta_{CA}$ = '+str(round(1/(10493*unit), 3)))
plt.plot(slopevals,coal2020, label = '$\eta_{CA}$ = '+str(round(1/(10655*unit), 3)))
plt.plot(slopevals,coal2023, label = '$\eta_{CA}$ = '+str(round(1/(10745*unit), 3)))
'''



'''
#plotting the n_ca values as a straight slope for GAS
gas2013 = np.array([0,1/(7948*unit)])
gas2016 = np.array([0,1/(7863*unit)])
gas2020 = np.array([0,1/(7725*unit)]) 
gas2023 = np.array([0,1/(7721*unit)])

plt.plot(slopevals,gas2013, label = '$\eta_{CA}$ = '+str(round(1/(7948*unit), 3)))
plt.plot(slopevals,gas2016, label = '$\eta_{CA}$ = '+str(round(1/(7863*unit), 3)))
plt.plot(slopevals,gas2020, label = '$\eta_{CA}$ = '+str(round(1/(7725*unit), 3)))
plt.plot(slopevals,gas2023, label = '$\eta_{CA}$ = '+str(round(1/(7721*unit), 3)))
'''



'''
#plotting the n_ca values as a straight slope for PETROLEUM
pet2013 = np.array([0,1/(10713*unit)]) 
pet2016 = np.array([0,1/(10811*unit)])
pet2020 = np.array([0,1/(11259*unit)])
pet2023 = np.array([0,1/(11465*unit)])

plt.plot(slopevals,pet2013, label = '$\eta_{CA}$ = '+str(round(1/(10713*unit), 3)))
plt.plot(slopevals,pet2016, label = '$\eta_{CA}$ = '+str(round(1/(10811*unit), 3)))
plt.plot(slopevals,pet2020, label = '$\eta_{CA}$ = '+str(round(1/(11259*unit), 3)))
plt.plot(slopevals,pet2023, label = '$\eta_{CA}$ = '+str(round(1/(11465*unit), 3)))
'''


'''
#plotting the n_ca values as a straight slope for NUCLEAR
nuc2013 = np.array([0,1/(10449*unit)])
nuc2016 = np.array([0,1/(10459*unit)])
nuc2020 = np.array([0,1/(10446*unit)])
nuc2023 = np.array([0,1/(10452*unit)])

plt.plot(slopevals,nuc2013, label = '$\eta_{CA}$ = '+str(round(1/(10449*unit), 3)))
plt.plot(slopevals,nuc2016, label = '$\eta_{CA}$ = '+str(round(1/(10459*unit), 3)))
plt.plot(slopevals,nuc2020, label = '$\eta_{CA}$ = '+str(round(1/(10446*unit), 3)))
plt.plot(slopevals,nuc2023, label = '$\eta_{CA}$ = '+str(round(1/(10452*unit), 3)))
'''

plt.xlim(-0.05,1.05)
plt.ylim(-0.05,0.55)

plt.xlabel(r'$q = \frac{\dot{Q}_H}{\overline{G}(T_H-T_C)} = \frac{\dot{Q}}{\dot{Q}_{max}}$')
plt.ylabel(r'$\frac{W_{cyc}}{\overline{G}(T_h-T_c)}$')


plt.title('Curzon-Ahlborn Power vs Efficiency')
plt.legend()
plt.show()


    
