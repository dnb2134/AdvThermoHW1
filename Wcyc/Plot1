import matplotlib.pyplot as plt
import numpy as np

xpoints = np.array([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1])

n_cpoints = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])


def ypoints(q, n_c):
    return (q*(1-q)*n_c)/(1-q*n_c)

ypoints0 = np.array([ypoints(xpoints[0],n_cpoints[0]),
                     ypoints(xpoints[1],n_cpoints[0]),ypoints(xpoints[2],n_cpoints[0]),
                     ypoints(xpoints[3],n_cpoints[0]),ypoints(xpoints[4],n_cpoints[0]),
                     ypoints(xpoints[5],n_cpoints[0]),ypoints(xpoints[6],n_cpoints[0]),
                     ypoints(xpoints[7],n_cpoints[0]),ypoints(xpoints[8],n_cpoints[0]),
                     ypoints(xpoints[9],n_cpoints[0]),ypoints(xpoints[10],n_cpoints[0])])

ypoints1 = np.array([ypoints(xpoints[0],n_cpoints[1]),
                     ypoints(xpoints[1],n_cpoints[1]),ypoints(xpoints[2],n_cpoints[1]),
                     ypoints(xpoints[3],n_cpoints[1]),ypoints(xpoints[4],n_cpoints[1]),
                     ypoints(xpoints[5],n_cpoints[1]),ypoints(xpoints[6],n_cpoints[1]),
                     ypoints(xpoints[7],n_cpoints[1]),ypoints(xpoints[8],n_cpoints[1]),
                     ypoints(xpoints[9],n_cpoints[1]),ypoints(xpoints[10],n_cpoints[1])])

ypoints2 = np.array([ypoints(xpoints[0],n_cpoints[2]),
                     ypoints(xpoints[1],n_cpoints[2]),ypoints(xpoints[2],n_cpoints[2]),
                     ypoints(xpoints[3],n_cpoints[2]),ypoints(xpoints[4],n_cpoints[2]),
                     ypoints(xpoints[5],n_cpoints[2]),ypoints(xpoints[6],n_cpoints[2]),
                     ypoints(xpoints[7],n_cpoints[2]),ypoints(xpoints[8],n_cpoints[2]),
                     ypoints(xpoints[9],n_cpoints[2]),ypoints(xpoints[10],n_cpoints[2])])

ypoints3 = np.array([ypoints(xpoints[0],n_cpoints[3]),
                     ypoints(xpoints[1],n_cpoints[3]),ypoints(xpoints[2],n_cpoints[3]),
                     ypoints(xpoints[3],n_cpoints[3]),ypoints(xpoints[4],n_cpoints[3]),
                     ypoints(xpoints[5],n_cpoints[3]),ypoints(xpoints[6],n_cpoints[3]),
                     ypoints(xpoints[7],n_cpoints[3]),ypoints(xpoints[8],n_cpoints[3]),
                     ypoints(xpoints[9],n_cpoints[3]),ypoints(xpoints[10],n_cpoints[3])])

ypoints4 = np.array([ypoints(xpoints[0],n_cpoints[4]),
                     ypoints(xpoints[1],n_cpoints[4]),ypoints(xpoints[2],n_cpoints[4]),
                     ypoints(xpoints[3],n_cpoints[4]),ypoints(xpoints[4],n_cpoints[4]),
                     ypoints(xpoints[5],n_cpoints[4]),ypoints(xpoints[6],n_cpoints[4]),
                     ypoints(xpoints[7],n_cpoints[4]),ypoints(xpoints[8],n_cpoints[4]),
                     ypoints(xpoints[9],n_cpoints[4]),ypoints(xpoints[10],n_cpoints[4])])

ypoints5 = np.array([ypoints(xpoints[0],n_cpoints[5]),
                     ypoints(xpoints[1],n_cpoints[5]),ypoints(xpoints[2],n_cpoints[5]),
                     ypoints(xpoints[3],n_cpoints[5]),ypoints(xpoints[4],n_cpoints[5]),
                     ypoints(xpoints[5],n_cpoints[5]),ypoints(xpoints[6],n_cpoints[5]),
                     ypoints(xpoints[7],n_cpoints[5]),ypoints(xpoints[8],n_cpoints[5]),
                     ypoints(xpoints[9],n_cpoints[5]),ypoints(xpoints[10],n_cpoints[5])])

ypoints6 = np.array([ypoints(xpoints[0],n_cpoints[6]),
                     ypoints(xpoints[1],n_cpoints[6]),ypoints(xpoints[2],n_cpoints[6]),
                     ypoints(xpoints[3],n_cpoints[6]),ypoints(xpoints[4],n_cpoints[6]),
                     ypoints(xpoints[5],n_cpoints[6]),ypoints(xpoints[6],n_cpoints[6]),
                     ypoints(xpoints[7],n_cpoints[6]),ypoints(xpoints[8],n_cpoints[6]),
                     ypoints(xpoints[9],n_cpoints[6]),ypoints(xpoints[10],n_cpoints[6])])

ypoints7 = np.array([ypoints(xpoints[0],n_cpoints[7]),
                     ypoints(xpoints[1],n_cpoints[7]),ypoints(xpoints[2],n_cpoints[7]),
                     ypoints(xpoints[3],n_cpoints[7]),ypoints(xpoints[4],n_cpoints[7]),
                     ypoints(xpoints[5],n_cpoints[7]),ypoints(xpoints[6],n_cpoints[7]),
                     ypoints(xpoints[7],n_cpoints[7]),ypoints(xpoints[8],n_cpoints[7]),
                     ypoints(xpoints[9],n_cpoints[7]),ypoints(xpoints[10],n_cpoints[7])])


plt.plot(xpoints,ypoints0, label = '$ƞ_c$ = 0.2')
plt.plot(xpoints,ypoints1, label = '$ƞ_c$ = 0.3')
plt.plot(xpoints,ypoints2, label = '$ƞ_c$ = 0.4')
plt.plot(xpoints,ypoints3, label = '$ƞ_c$ = 0.5')
plt.plot(xpoints,ypoints4, label = '$ƞ_c$ = 0.6')
plt.plot(xpoints,ypoints5, label = '$ƞ_c$ = 0.7')
plt.plot(xpoints,ypoints6, label = '$ƞ_c$ = 0.8')
plt.plot(xpoints,ypoints7, label = '$ƞ_c$ = 0.9')

plt.xlim(-0.05,1.05)
plt.ylim(-0.05,0.55)

plt.xlabel(r'$q = \frac{\dot{Q}_H}{\overline{G}(T_H-T_C)} = \frac{\dot{Q}}{\dot{Q}_{max}}$')
plt.ylabel(r'$\frac{W_{cyc}}{\overline{G}(T_h-T_c)}$')

plt.title('Curzon-Ahlborn Power vs Efficiency')
plt.legend()
plt.show()


    
